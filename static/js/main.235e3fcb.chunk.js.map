{"version":3,"sources":["Components/Header/Header.jsx","Redux/Actions/addTaskDataAction.jsx","Redux/Constants/constants.jsx","Components/MainPage/FormMain.jsx","Components/MainPage/ChildMessageRenderer.jsx","Components/MainPage/Table.jsx","Components/MainPage/MainPage.jsx","App.js","serviceWorker.js","Redux/Reducers/addTaskDataReducer.jsx","Redux/Reducers/rootReducers.jsx","index.js"],"names":["header","className","currentTask","task","type","FormMain","state","formValues","task1","selected","textToggle","handleToggle","event","preventDefault","props","toggle","handleDatePicker","date","temp","startDate","toLocaleDateString","setState","handleChange","target","name","value","prevState","handleGrid","taskValues","randomId","Math","floor","random","spreadValues","addTaskData","handleEditGrid","updateTaskData","handleSelectChanges","this","editTaskData","undefined","Form","onSubmit","Group","Label","Control","onChange","onDayChange","placeholder","variant","onClick","Component","connect","store","addedTasks","addTaskDataReducer","data","currentTaskEditedFromStore","dispatch","currentTaskEdited","ChildMessageRenderer","invokeParentEditMethod","context","componentEditParent","methodEditTask","node","invokeParentMethod","bind","componentParent","methodFromParent","DataGrid","modules","AllCommunityModules","columnDefs","headerName","field","cellRenderer","colId","editable","minWidth","defaultColDef","sortable","flex","filter","resizable","frameworkComponents","childMessageRenderer","onGridReady","params","gridApi","api","gridColumnApi","columnApi","context1","cell","deleteToggle","deleteTask","editToggle","style","height","width","rowData","MainPage","taskData","show","hide","currentTaskData","deleteData","handleEditData","handleEditToggle","handleHide","handleDeleteToggle","handleDeleteTask","deleteConfirmation","handleTaskData","handleData","Button","color","row","Modal","onHide","Header","Title","Body","Footer","App","Boolean","window","location","hostname","match","initialState","combineReducers","action","tempData","items","item","index","findIndex","x","slice","Object","assign","createStore","combinedReducer","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.235e3fcb.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst header = () => {\r\n  return (\r\n    <header className=\"App-header\">\r\n      <h1>ToDOist</h1>\r\n    </header>\r\n  );\r\n};\r\n\r\nexport default header;\r\n","import {\r\n  ADD_TASK_DATA,\r\n  DELETE_TASK,\r\n  CURRENT_TASK,\r\n  UPDATE_TASK,\r\n} from \"../Constants/constants\";\r\n\r\nexport const addTaskData = (data) => {\r\n  return {\r\n    type: ADD_TASK_DATA,\r\n    data,\r\n  };\r\n};\r\n\r\nexport const deleteTask = (task) => {\r\n  return {\r\n    type: DELETE_TASK,\r\n    task,\r\n  };\r\n};\r\n\r\nexport const currentTask = (task) => {\r\n  return {\r\n    type: CURRENT_TASK,\r\n    task,\r\n  };\r\n};\r\n\r\nexport const updateTaskData = (task) => {\r\n  return {\r\n    type: UPDATE_TASK,\r\n    task,\r\n  };\r\n};\r\n","export const ADD_TASK_DATA = \"ADD_TASK_DATA\";\r\nexport const DELETE_TASK = \"DELETE_TASK\";\r\nexport const CURRENT_TASK = \"CURRENT_TASK\";\r\nexport const UPDATE_TASK = \"UPDATE_TASK\";\r\n","import React, { Component } from \"react\";\r\nimport { Form, Button } from \"react-bootstrap\";\r\nimport \"./addtaskbutton.css\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport DayPickerInput from \"react-day-picker/DayPickerInput\";\r\nimport \"react-day-picker/lib/style.css\";\r\nimport { connect } from \"react-redux\";\r\nimport {\r\n  addTaskData,\r\n  currentTask,\r\n  updateTaskData,\r\n} from \"../../Redux/Actions/addTaskDataAction\";\r\nclass FormMain extends Component {\r\n  state = {\r\n    formValues: { task1: \"\", selected: \"choose\" },\r\n    textToggle: false,\r\n  };\r\n  componentDidMount() {\r\n    this.setState({ formValues: { ...this.props.editTaskData } });\r\n  }\r\n  handleToggle = (event) => {\r\n    event.preventDefault();\r\n    this.props.toggle();\r\n  };\r\n  handleDatePicker = (date) => {\r\n    const temp = { ...this.state.formValues };\r\n    temp.startDate = date.toLocaleDateString(\"fr-CA\");\r\n    this.setState({ formValues: temp });\r\n  };\r\n\r\n  handleChange = (event) => {\r\n    const temp = { ...this.state.formValues };\r\n    temp[event.target.name] = event.target.value;\r\n\r\n    this.setState((prevState) => ({\r\n      formValues: temp,\r\n      textToggle: !prevState.textToggle,\r\n    }));\r\n  };\r\n  handleGrid = () => {\r\n    const taskValues = this.state.formValues;\r\n    const randomId = Math.floor(Math.random() * 100 + 1);\r\n    const spreadValues = { ...taskValues, randomId };\r\n    this.props.addTaskData(spreadValues);\r\n  };\r\n\r\n  handleEditGrid = () => {\r\n    this.props.updateTaskData(this.state.formValues);\r\n  };\r\n\r\n  handleSelectChanges = (event) => {\r\n    const temp = { ...this.state.formValues };\r\n    temp.selected = event.target.value;\r\n    this.setState({\r\n      formValues: temp,\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const task1 = this.props.editTaskData\r\n      ? this.state.formValues.task1\r\n      : undefined;\r\n    return (\r\n      <div className=\"todo-form\">\r\n        <Form onSubmit={this.handleToggle}>\r\n          <div>\r\n            <Form.Group className=\"task-name-group\">\r\n              <div className=\"task-name\">\r\n                <Form.Label className=\"task-name-label\">Task</Form.Label>\r\n                <Form.Control\r\n                  className=\"task-name-control\"\r\n                  type=\"Text\"\r\n                  name=\"task1\"\r\n                  onChange={this.handleChange}\r\n                  value={task1}\r\n                />\r\n\r\n                <select\r\n                  className=\"select-class\"\r\n                  value={this.state.formValues.selected}\r\n                  onChange={this.handleSelectChanges}\r\n                >\r\n                  <option value=\"Choose\">Choose</option>\r\n                  <option value=\"open\">Open</option>\r\n                  <option value=\"in progress\">In progress</option>\r\n                  <option value=\"done\">done</option>\r\n                </select>\r\n                <DayPickerInput\r\n                  name=\"datePicker\"\r\n                  onDayChange={this.handleDatePicker}\r\n                  placeholder={this.state.formValues.startDate}\r\n                />\r\n              </div>\r\n            </Form.Group>\r\n            {this.props.editTaskData ? (\r\n              <div>\r\n                <Button\r\n                  className=\"task-name-button\"\r\n                  variant=\"primary\"\r\n                  type=\"submit\"\r\n                  onClick={this.handleEditGrid}\r\n                >\r\n                  Submit\r\n                </Button>\r\n                <Button\r\n                  className=\"task-name-button\"\r\n                  variant=\"secondary\"\r\n                  onClick={this.handleToggle}\r\n                >\r\n                  close\r\n                </Button>\r\n              </div>\r\n            ) : (\r\n              <Button\r\n                className=\"task-name-button\"\r\n                variant=\"primary\"\r\n                type=\"submit\"\r\n                onClick={this.handleGrid}\r\n              >\r\n                submit\r\n              </Button>\r\n            )}\r\n          </div>\r\n        </Form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (store) => {\r\n  return {\r\n    addedTasks: store.addTaskDataReducer.data,\r\n    currentTaskEditedFromStore: store.addTaskDataReducer.currentTask,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    addTaskData: (data) => dispatch(addTaskData(data)),\r\n    currentTaskEdited: (task) => dispatch(currentTask(task)),\r\n    updateTaskData: (task) => dispatch(updateTaskData(task)),\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(FormMain);\r\n","import React, { Component } from \"react\";\r\nimport Delete from \"@material-ui/icons/Delete\";\r\nimport Edit from \"@material-ui/icons/Create\";\r\n\r\nexport default class ChildMessageRenderer extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.invokeParentMethod = this.invokeParentMethod.bind(this);\r\n  }\r\n\r\n  invokeParentEditMethod = () => {\r\n    this.props.context.componentEditParent.methodEditTask(this.props.node.data);\r\n  };\r\n\r\n  invokeParentMethod() {\r\n    this.props.context.componentParent.methodFromParent(this.props.node.data);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <span>\r\n        <Edit onClick={this.invokeParentEditMethod} />\r\n        <Delete onClick={this.invokeParentMethod} />\r\n      </span>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport { AgGridReact } from \"ag-grid-react\";\r\nimport { AllCommunityModules } from \"@ag-grid-community/all-modules\";\r\n\r\nimport \"ag-grid-community/dist/styles/ag-grid.css\";\r\nimport \"ag-grid-community/dist/styles/ag-theme-alpine.css\";\r\n\r\nimport ChildMessageRenderer from \"./ChildMessageRenderer\";\r\nimport { connect } from \"react-redux\";\r\nimport { currentTask } from \"../../Redux/Actions/addTaskDataAction\";\r\n\r\nclass DataGrid extends Component {\r\n  modules = AllCommunityModules;\r\n  columnDefs = [\r\n    {\r\n      headerName: \"Task\",\r\n      field: \"task1\",\r\n    },\r\n    {\r\n      headerName: \"Status\",\r\n      field: \"selected\",\r\n    },\r\n    {\r\n      headerName: \"Date\",\r\n      field: \"startDate\",\r\n    },\r\n    {\r\n      headerName: \"\",\r\n      cellRenderer: \"childMessageRenderer\",\r\n      colId: \"params\",\r\n      editable: false,\r\n      minWidth: 150,\r\n    },\r\n  ];\r\n\r\n  defaultColDef = {\r\n    editable: true,\r\n    sortable: true,\r\n    flex: 1,\r\n    minWidth: 100,\r\n    filter: true,\r\n    resizable: true,\r\n  };\r\n  frameworkComponents = {\r\n    childMessageRenderer: ChildMessageRenderer,\r\n  };\r\n\r\n  onGridReady = (params) => {\r\n    this.gridApi = params.api;\r\n    this.gridColumnApi = params.columnApi;\r\n  };\r\n\r\n  context1 = {\r\n    componentParent: {\r\n      methodFromParent: (cell) => {\r\n        this.props.deleteToggle();\r\n        this.props.deleteTask(cell);\r\n      },\r\n    },\r\n    componentEditParent: {\r\n      methodEditTask: (cell) => {\r\n        this.props.editToggle();\r\n        this.props.currentTask(cell);\r\n      },\r\n    },\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"ag-theme-alpine\" style={{ height: 400, width: 600 }}>\r\n        <AgGridReact\r\n          modules={this.modules}\r\n          rowData={this.props.addedTasks}\r\n          columnDefs={this.columnDefs}\r\n          defaultColDef={this.defaultColDef}\r\n          frameworkComponents={this.frameworkComponents}\r\n          onGridReady={this.onGridReady}\r\n          context={this.context1}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    addedTasks: state.addTaskDataReducer.data,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    currentTask: (task) => {\r\n      dispatch(currentTask(task));\r\n    },\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(DataGrid);\r\n","import React, { Component, Fragment } from \"react\";\r\nimport \"./addtaskbutton.css\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Add from \"@material-ui/icons/Add\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport FormMain from \"./FormMain\";\r\nimport DataGrid from \"./Table\";\r\nimport { Modal, Button as Button1 } from \"react-bootstrap\";\r\nimport \"react-day-picker/lib/style.css\";\r\nimport { connect } from \"react-redux\";\r\nimport { deleteTask } from \"../../Redux/Actions/addTaskDataAction\";\r\n\r\nclass MainPage extends Component {\r\n  state = {\r\n    toggle: false,\r\n    taskData: [],\r\n    show: false,\r\n    hide: false,\r\n    deleteToggle: false,\r\n    currentTaskData: {},\r\n    deleteData: {},\r\n  };\r\n\r\n  handleToggle = () => {\r\n    this.setState((prevState) => ({\r\n      toggle: !prevState.toggle,\r\n    }));\r\n  };\r\n\r\n  handleEditData = (data) => {\r\n    this.setState({ currentTaskData: data });\r\n  };\r\n\r\n  handleEditToggle = () => {\r\n    this.setState((prevState) => ({\r\n      show: !prevState.show,\r\n    }));\r\n  };\r\n  handleHide = () => {\r\n    this.setState((prevState) => ({\r\n      hide: false,\r\n    }));\r\n  };\r\n  handleDeleteToggle = () => {\r\n    this.setState((prevState) => ({\r\n      deleteToggle: !prevState.deleteToggle,\r\n    }));\r\n  };\r\n  handleDeleteTask = (task) => {\r\n    this.setState({ deleteData: task });\r\n  };\r\n  deleteConfirmation = (event) => {\r\n    if (event.target.name === \"yes\") {\r\n      this.props.deleteTask(this.state.deleteData);\r\n      this.setState({ deleteToggle: false });\r\n    } else if (event.target.name === \"no\") {\r\n      this.setState({ deleteToggle: false });\r\n    }\r\n  };\r\n  render() {\r\n    return (\r\n      <Fragment>\r\n        {this.state.toggle ? (\r\n          <div className=\"middlepane\">\r\n            <FormMain\r\n              toggle={this.handleToggle}\r\n              handleTaskData={this.handleData}\r\n            />\r\n          </div>\r\n        ) : (\r\n          <div className=\"add-task-button\">\r\n            <Button\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              onClick={this.handleToggle}\r\n            >\r\n              <Add /> Add Task\r\n            </Button>\r\n          </div>\r\n        )}\r\n        <div className=\"data-grid-component\">\r\n          <DataGrid\r\n            className=\"data-grid-class\"\r\n            row={this.state.taskData}\r\n            editToggle={this.handleEditToggle}\r\n            //  editTask={this.editTaskData}\r\n            deleteToggle={this.handleDeleteToggle}\r\n            deleteTask={this.handleDeleteTask}\r\n          />\r\n          <Modal\r\n            className=\"modal-class\"\r\n            show={this.state.show}\r\n            onHide={this.handleHide}\r\n          >\r\n            <Modal.Header>\r\n              <div>\r\n                <Modal.Title>Edit Task</Modal.Title>\r\n              </div>\r\n            </Modal.Header>\r\n            <div>\r\n              <FormMain\r\n                toggle={this.handleEditToggle}\r\n                editTaskData={this.props.currentTask}\r\n              />\r\n            </div>\r\n          </Modal>\r\n          <Modal className=\"modal-class\" show={this.state.deleteToggle}>\r\n            <Modal.Header>\r\n              <div>\r\n                <Modal.Title>Are you Sure?</Modal.Title>\r\n              </div>\r\n            </Modal.Header>\r\n            <Modal.Body>\r\n              <p>you want to delete this </p>\r\n            </Modal.Body>\r\n\r\n            <Modal.Footer>\r\n              <Button1\r\n                name=\"yes\"\r\n                variant=\"primary\"\r\n                onClick={this.deleteConfirmation}\r\n              >\r\n                {\" \"}\r\n                Yes,Delete it!\r\n              </Button1>\r\n              <Button1\r\n                name=\"no\"\r\n                variant=\"danger\"\r\n                onClick={this.deleteConfirmation}\r\n              >\r\n                No\r\n              </Button1>\r\n            </Modal.Footer>\r\n          </Modal>\r\n        </div>\r\n      </Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    currentTask: state.addTaskDataReducer.currentTask,\r\n  };\r\n};\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    deleteTask: (task) => {\r\n      dispatch(deleteTask(task));\r\n    },\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(MainPage);\r\n","import React from \"react\";\nimport \"./App.css\";\n\nimport Header from \"./Components/Header/Header\";\nimport MainPage from \"./Components/MainPage/MainPage\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header />\n      <MainPage />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {\r\n  ADD_TASK_DATA,\r\n  CURRENT_TASK,\r\n  DELETE_TASK,\r\n  UPDATE_TASK,\r\n} from \"../Constants/constants\";\r\nconst initialState = {\r\n  addTaskData: {\r\n    data: [],\r\n    currentTask: {},\r\n  },\r\n};\r\n\r\nexport const addTaskDataReducer = (\r\n  state = initialState.addTaskData,\r\n  action\r\n) => {\r\n  switch (action.type) {\r\n    case ADD_TASK_DATA:\r\n      return {\r\n        ...state,\r\n        data: [...state.data, action.data],\r\n      };\r\n    case DELETE_TASK:\r\n      const tempData = [...state.data];\r\n      const items = tempData.filter(\r\n        (item) => item.randomId !== action.task.randomId\r\n      );\r\n      return {\r\n        ...state,\r\n        data: items,\r\n      };\r\n    case CURRENT_TASK:\r\n      return {\r\n        ...state,\r\n        currentTask: action.task,\r\n      };\r\n    case UPDATE_TASK:\r\n      var index = state.data.findIndex((x) => {\r\n        return x.randomId === action.task.randomId;\r\n      });\r\n      if (index === -1) {\r\n      } else {\r\n        return {\r\n          ...state,\r\n          data: [\r\n            ...state.data.slice(0, index),\r\n            Object.assign({}, state.data[index], action.task),\r\n            ...state.data.slice(index + 1),\r\n          ],\r\n        };\r\n      }\r\n      break;\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import { combineReducers } from \"redux\";\r\nimport { addTaskDataReducer } from \"./addTaskDataReducer\";\r\n\r\nexport default combineReducers({ addTaskDataReducer });\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { Provider } from \"react-redux\";\nimport { createStore } from \"redux\"; //, applyMiddleware\nimport combinedReducer from \"./Redux/Reducers/rootReducers\";\n//import apiMiddleware from \"./Redux/middleware\";\n\nconst store = createStore(combinedReducer); // applyMiddleware(apiMiddleware)\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}